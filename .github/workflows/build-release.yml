name: Build and publish wheels to pypi

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: manylinux2014_x86_64
            zip: ubuntu-22.04-binaries.zip
            library: libausaxs.so

          - os: macos-latest  
            platform: macosx_11_0_universal2
            zip: macos-universal-binaries.zip
            library: libausaxs.dylib

          - os: windows-latest
            platform: win_amd64
            zip: windows-binaries.zip
            library: ausaxs.dll

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download and extract platform-specific library
        shell: bash
        run: | 
          echo "Downloading ${{ matrix.zip }} for platform ${{ matrix.platform }}..."
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/AUSAXS/AUSAXS/releases/latest | \
                         grep "browser_download_url.*${{ matrix.zip }}" | \
                         cut -d '"' -f 4)

          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Could not find download URL for ${{ matrix.zip }}"
            echo "Available releases:"
            curl -s https://api.github.com/repos/AUSAXS/AUSAXS/releases/latest | grep "browser_download_url" | cut -d '"' -f 4
            exit 1
          fi

          echo "Download URL: $DOWNLOAD_URL"
          curl -L -o release.zip "$DOWNLOAD_URL"
          unzip -q release.zip
          mkdir -p pyausaxs/resources
          LIBRARY_PATH=$(find . -name "${{ matrix.library }}" -type f | head -n 1)

          if [ -z "$LIBRARY_PATH" ]; then
            echo "Error: Could not find ${{ matrix.library }} in extracted files"
            echo "Available library files:"
            find . -name "*.so" -o -name "*.dylib" -o -name "*.dll" | head -10
            echo "Directory structure:"
            find . -type d | head -10
            exit 1
          fi

          cp "$LIBRARY_PATH" "pyausaxs/resources/${{ matrix.library }}"
          echo "Library copied: ${{ matrix.library }}"
          ls -la pyausaxs/resources/

      - name: Generate platform-specific pyproject.toml
        shell: bash
        run: |
          sed 's|LIBRARY_PLACEHOLDER|resources/${{ matrix.library }}|' pyproject.template.toml > pyproject.toml
          echo "Generated pyproject.toml for ${{ matrix.platform }}:"

      - name: Verify library exists
        shell: bash
        run: |
          if [ ! -f "pyausaxs/resources/${{ matrix.library }}" ]; then
            echo "Error: Library not found at pyausaxs/resources/${{ matrix.library }}"
            ls -la pyausaxs/resources/
            exit 1
          fi

      - name: Build platform-specific wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip build
          python -m build --wheel

      - name: Apply platform tag
        shell: bash
        run: |
          cd dist
          for wheel in *.whl; do
            # Replace the generic tag with platform-specific tag
            platform_wheel=$(echo "$wheel" | sed 's/-py3-none-any/-py3-none-${{ matrix.platform }}/')
            final_wheel=$(echo "$platform_wheel" | sed 's/^/pyausaxs-wheel-/')

            if [ "$wheel" != "$platform_wheel" ]; then
              mv "$wheel" "$platform_wheel"
              echo "Applied platform tag: $wheel -> $platform_wheel"
            fi

            echo "Final wheel: $final_wheel ($(du -h "$final_wheel" | cut -f1))"
          done
      
      - name: Validate wheel
        shell: bash
        run: |
          pip install twine
          twine check dist/*.whl

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.platform }}
          path: dist/*.whl

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          merge-multiple: true
          path: dist/
          
      - name: List artifacts to be published
        run: |
          echo "Wheels to be published:"
          ls -la dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
