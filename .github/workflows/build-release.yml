name: Build and publish wheels to pypi

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: manylinux2014_x86_64
            library: "libausaxs.so"

          - os: macos-latest  
            platform: macosx_11_0_universal2
            library: "libausaxs.dylib"

          - os: windows-latest
            platform: win_amd64
            library: "libausaxs.dll"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Copy platform-specific library
        shell: bash
        run: |
          mkdir -p pyausaxs/resources
          cp "resources/${{ matrix.library }}" "pyausaxs/resources/"
          echo "Library copied for ${{ matrix.platform }}:"
          ls -la pyausaxs/resources/

      - name: Generate platform-specific pyproject.toml
        shell: bash
        run: |
          sed 's|LIBRARY_PLACEHOLDER|resources/${{ matrix.library }}|' pyproject.template.toml > pyproject.toml
          echo "Generated pyproject.toml for ${{ matrix.platform }}:"
          cat pyproject.toml

      - name: Verify library exists
        shell: bash
        run: |
          if [ ! -f "resources/${{ matrix.library }}" ]; then
            echo "Error: Source library resources/${{ matrix.library }} not found!"
            ls -la resources/
            exit 1
          fi

      - name: Build platform-specific wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip build
          python -m build --wheel

      - name: Apply platform tag
        shell: bash
        run: |
          cd dist
          for wheel in *.whl; do
            # Replace the generic tag with platform-specific tag
            platform_wheel=$(echo "$wheel" | sed 's/-py3-none-any/-py3-none-${{ matrix.platform }}/')
            final_wheel=$(echo "$platform_wheel" | sed 's/^/pyausaxs-wheel-/')

            if [ "$wheel" != "$platform_wheel" ]; then
              mv "$wheel" "$platform_wheel"
              echo "Applied platform tag: $wheel -> $platform_wheel"
            fi

            echo "Final wheel: $final_wheel ($(du -h "$final_wheel" | cut -f1))"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.platform }}
          path: dist/*.whl

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          merge-multiple: true
          path: dist/
          
      - name: List artifacts to be published
        run: |
          echo "Wheels to be published:"
          ls -la dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
